@page "/account"
@attribute [Authorize]
@inject IToastService ToastService
@inject IUserProxy UserProxy
@inject IJsonProxy JsonProxy
@inject IInscripcionProxy InscripcionProxy

<PageTitle>Mi cuenta</PageTitle>

<h1>Mi Cuenta</h1>

<div>
    <h2>Cambie su informacion personal</h2>
    <hr />
    <div class="row">
        <div class="col-md-3">
            <ul class="nav nav-pills flex-column">
                <li class="nav-item mb-3">
                    <a class="w-100 btn btn-log btn-primary" @onclick="() => CambiarVista(0)">Datos Personales</a>
                </li>
                <li class="nav-item mb-3">
                    <a class="w-100 btn btn-log btn-primary" @onclick="() => CambiarVista(1)">Cambio de clave</a>
                </li>
                <li class="nav-item">
                    <a class="w-100 btn btn-log btn-primary" @onclick="() => CambiarVista(2)">Talleres Inscritos</a>
                </li>
            </ul>
        </div>
        <div class="col-md-9">
            @switch (VistaSeleccionada)
            {
                case 0:
                    <DatosPersonales Model="Perfil" OnGrabar="GrabarDatosPersonales"
                                     Departamentos="Departamentos"
                                     Provincias="Provincias"
                                     Distritos="Distritos"
                                     OnDepartamentoSelected="OnDepartamentoSelected"
                                     OnProvinciaSelected="OnProvinciaSelected" />
                    break;
                case 1:
                    <CambioClave Model="CambioPassword" OnGrabar="CambiarPassword" />
                    break;
                default:
                    <TalleresAlumno CargarLista="CargaTalleresAlumno"
                                    CambiarSituacionClick="CambiarSituacion"
                                    Inscripciones="Inscripciones?.Data"
                                    IsLoading="IsLoading" />

                    <DataPager Result="PagedResult" OnPageChanged="PaginaCambiada" OnPageSizeChanged="FilasPorPagina" />
                    break;
            }
        </div>
    </div>
</div>

<LoadingComponent IsLoading="IsLoading" />

@code {

    private int VistaSeleccionada { get; set; }

    private bool IsLoading { get; set; }

    private UpdateProfileDtoRequest? Perfil { get; set; }
    private ChangePasswordDtoRequest? CambioPassword { get; set; }

    public ICollection<DepartamentoModel> Departamentos { get; set; } = new List<DepartamentoModel>();
    public ICollection<ProvinciaModel> Provincias { get; set; } = new List<ProvinciaModel>();
    public ICollection<DistritoModel> Distritos { get; set; } = new List<DistritoModel>();

    public PaginationResponse<InscripcionDtoResponse>? Inscripciones { get; set; }
    public int Pagina { get; set; } = 1;
    public int Filas { get; set; } = 5;

    private PagedResult<InscripcionDtoResponse> PagedResult { get; set; } = new()
        {
            RowPerPage = 5,
            CurrentPage = 1
        };


    private async Task CambiarVista(int vista)
    {
        try
        {
            IsLoading = true;
            VistaSeleccionada = vista;

            var perfil = await UserProxy.GetProfileAsync();

            switch (vista)
            {
                case 0:
                    Perfil = new UpdateProfileDtoRequest()
                        {
                            NombreCompleto = perfil.Data.NombreCompleto,
                            Email = perfil.Data.Correo,
                            Telefono = perfil.Data.Telefono ?? string.Empty,
                            NroDocumento = perfil.Data.NroDocumento,
                            Departamento = perfil.Data.Departamento,
                            Provincia = perfil.Data.Provincia,
                            Distrito = perfil.Data.Distrito,
                        };
                    break;
                case 1:
                    CambioPassword = new();
                    break;
                default:
                    await CargaTalleresAlumno();
                    break;
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CambiarVista(0);
        Departamentos = await JsonProxy.ListDepartamentos();
    }

    private async Task GrabarDatosPersonales()
    {
        try
        {
            IsLoading = true;
            if (Perfil is not null)
            {
                var response = await UserProxy.UpdateProfileAsync(Perfil);
                if (response.Success)
                    ToastService.ShowSuccess("Datos actualizados correctamente!");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task CambiarPassword()
    {
        try
        {
            IsLoading = true;
            if (CambioPassword is not null)
            {
                var response = await UserProxy.ChangePasswordAsync(CambioPassword);
                if (response.Success)
                    ToastService.ShowSuccess("Clave actualizada correctamente!");
                else
                {
                    ToastService.ShowWarning(response.ErrorMessage!);
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnDepartamentoSelected(ChangeEventArgs args)
    {
        if (Perfil is null) return;

        var codDpto = args.Value!.ToString()!;
        if (args.Value != null && !codDpto.StartsWith("-"))
        {
            Provincias = await JsonProxy.ListProvincias(codDpto);
            Distritos = new List<DistritoModel>();
            Perfil.Departamento = codDpto;
        }
        else
        {
            Provincias = new List<ProvinciaModel>();
            Distritos = new List<DistritoModel>();
        }
    }

    private async Task OnProvinciaSelected(ChangeEventArgs args)
    {
        if (Perfil is null) return;

        var codProvincia = args.Value!.ToString()!;
        if (args.Value != null && !codProvincia.StartsWith("-"))
        {
            Distritos = await JsonProxy.ListDistritos(codProvincia);
            Perfil.Provincia = codProvincia;
        }
        else
        {
            Distritos = new List<DistritoModel>();
        }
    }

    private async Task CargaTalleresAlumno()
    {
        try
        {
            IsLoading = true;
            Inscripciones = await InscripcionProxy.ListTalleresAsync(Pagina, Filas);

            if (Inscripciones is { Data: not null })
            {
                PagedResult.Results = Inscripciones.Data;
                PagedResult.RowCount = Inscripciones.Data.Count;
                PagedResult.TotalPages = Inscripciones.TotalPages;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowWarning(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }

    }

    private async Task CambiarSituacion(InscripcionDtoResponse item)
    {
        try
        {
            await InscripcionProxy.CambiarSituacionAsync(item.Id);
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async Task PaginaCambiada()
    {
        IsLoading = true;
        Pagina = PagedResult.CurrentPage;
        Filas = PagedResult.RowPerPage;
        await CargaTalleresAlumno();

    }

    private async Task FilasPorPagina()
    {
        Pagina = PagedResult.CurrentPage;
        Filas = PagedResult.RowPerPage;
        await CargaTalleresAlumno();
    }

}